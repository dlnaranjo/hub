<?php

namespace Proxies\__CG__\Hub\HubBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class User extends \Hub\HubBundle\Entity\User implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'Hub\\HubBundle\\Entity\\User' . "\0" . 'user', '' . "\0" . 'Hub\\HubBundle\\Entity\\User' . "\0" . 'role', '' . "\0" . 'Hub\\HubBundle\\Entity\\User' . "\0" . 'password', '' . "\0" . 'Hub\\HubBundle\\Entity\\User' . "\0" . 'country', '' . "\0" . 'Hub\\HubBundle\\Entity\\User' . "\0" . 'city', '' . "\0" . 'Hub\\HubBundle\\Entity\\User' . "\0" . 'email', '' . "\0" . 'Hub\\HubBundle\\Entity\\User' . "\0" . 'website', '' . "\0" . 'Hub\\HubBundle\\Entity\\User' . "\0" . 'language', '' . "\0" . 'Hub\\HubBundle\\Entity\\User' . "\0" . 'registrationdate', '' . "\0" . 'Hub\\HubBundle\\Entity\\User' . "\0" . 'active', '' . "\0" . 'Hub\\HubBundle\\Entity\\User' . "\0" . 'salt', '' . "\0" . 'Hub\\HubBundle\\Entity\\User' . "\0" . 'lastaccess', '' . "\0" . 'Hub\\HubBundle\\Entity\\User' . "\0" . 'perfilphoto', '' . "\0" . 'Hub\\HubBundle\\Entity\\User' . "\0" . 'idnotificationemitter', '' . "\0" . 'Hub\\HubBundle\\Entity\\User' . "\0" . 'idnotificationreceiver'];
        }

        return ['__isInitialized__', '' . "\0" . 'Hub\\HubBundle\\Entity\\User' . "\0" . 'user', '' . "\0" . 'Hub\\HubBundle\\Entity\\User' . "\0" . 'role', '' . "\0" . 'Hub\\HubBundle\\Entity\\User' . "\0" . 'password', '' . "\0" . 'Hub\\HubBundle\\Entity\\User' . "\0" . 'country', '' . "\0" . 'Hub\\HubBundle\\Entity\\User' . "\0" . 'city', '' . "\0" . 'Hub\\HubBundle\\Entity\\User' . "\0" . 'email', '' . "\0" . 'Hub\\HubBundle\\Entity\\User' . "\0" . 'website', '' . "\0" . 'Hub\\HubBundle\\Entity\\User' . "\0" . 'language', '' . "\0" . 'Hub\\HubBundle\\Entity\\User' . "\0" . 'registrationdate', '' . "\0" . 'Hub\\HubBundle\\Entity\\User' . "\0" . 'active', '' . "\0" . 'Hub\\HubBundle\\Entity\\User' . "\0" . 'salt', '' . "\0" . 'Hub\\HubBundle\\Entity\\User' . "\0" . 'lastaccess', '' . "\0" . 'Hub\\HubBundle\\Entity\\User' . "\0" . 'perfilphoto', '' . "\0" . 'Hub\\HubBundle\\Entity\\User' . "\0" . 'idnotificationemitter', '' . "\0" . 'Hub\\HubBundle\\Entity\\User' . "\0" . 'idnotificationreceiver'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (User $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function setRole($role)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRole', [$role]);

        return parent::setRole($role);
    }

    /**
     * {@inheritDoc}
     */
    public function getRole()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRole', []);

        return parent::getRole();
    }

    /**
     * {@inheritDoc}
     */
    public function setUser($user)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUser', [$user]);

        return parent::setUser($user);
    }

    /**
     * {@inheritDoc}
     */
    public function getUser()
    {
        if ($this->__isInitialized__ === false) {
            return  parent::getUser();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUser', []);

        return parent::getUser();
    }

    /**
     * {@inheritDoc}
     */
    public function setPassword($password)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPassword', [$password]);

        return parent::setPassword($password);
    }

    /**
     * {@inheritDoc}
     */
    public function setCountry($country)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCountry', [$country]);

        return parent::setCountry($country);
    }

    /**
     * {@inheritDoc}
     */
    public function getCountry()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCountry', []);

        return parent::getCountry();
    }

    /**
     * {@inheritDoc}
     */
    public function setCity($city)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCity', [$city]);

        return parent::setCity($city);
    }

    /**
     * {@inheritDoc}
     */
    public function getCity()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCity', []);

        return parent::getCity();
    }

    /**
     * {@inheritDoc}
     */
    public function setEmail($email)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEmail', [$email]);

        return parent::setEmail($email);
    }

    /**
     * {@inheritDoc}
     */
    public function getEmail()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEmail', []);

        return parent::getEmail();
    }

    /**
     * {@inheritDoc}
     */
    public function setWebsite($website)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setWebsite', [$website]);

        return parent::setWebsite($website);
    }

    /**
     * {@inheritDoc}
     */
    public function getWebsite()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getWebsite', []);

        return parent::getWebsite();
    }

    /**
     * {@inheritDoc}
     */
    public function setLanguage($language)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLanguage', [$language]);

        return parent::setLanguage($language);
    }

    /**
     * {@inheritDoc}
     */
    public function getLanguage()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLanguage', []);

        return parent::getLanguage();
    }

    /**
     * {@inheritDoc}
     */
    public function setRegistrationdate($registrationdate)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRegistrationdate', [$registrationdate]);

        return parent::setRegistrationdate($registrationdate);
    }

    /**
     * {@inheritDoc}
     */
    public function getRegistrationdate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRegistrationdate', []);

        return parent::getRegistrationdate();
    }

    /**
     * {@inheritDoc}
     */
    public function setActive($active)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setActive', [$active]);

        return parent::setActive($active);
    }

    /**
     * {@inheritDoc}
     */
    public function getActive()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getActive', []);

        return parent::getActive();
    }

    /**
     * {@inheritDoc}
     */
    public function setSalt($salt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSalt', [$salt]);

        return parent::setSalt($salt);
    }

    /**
     * {@inheritDoc}
     */
    public function setLastaccess($lastaccess)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLastaccess', [$lastaccess]);

        return parent::setLastaccess($lastaccess);
    }

    /**
     * {@inheritDoc}
     */
    public function getLastaccess()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLastaccess', []);

        return parent::getLastaccess();
    }

    /**
     * {@inheritDoc}
     */
    public function setPerfilphoto($perfilphoto)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPerfilphoto', [$perfilphoto]);

        return parent::setPerfilphoto($perfilphoto);
    }

    /**
     * {@inheritDoc}
     */
    public function getPerfilphoto()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPerfilphoto', []);

        return parent::getPerfilphoto();
    }

    /**
     * {@inheritDoc}
     */
    public function addIdnotificationemitter(\Hub\HubBundle\Entity\Notification $idnotification)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addIdnotificationemitter', [$idnotification]);

        return parent::addIdnotificationemitter($idnotification);
    }

    /**
     * {@inheritDoc}
     */
    public function removeIdnotificationemitter(\Hub\HubBundle\Entity\Notification $idnotification)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeIdnotificationemitter', [$idnotification]);

        return parent::removeIdnotificationemitter($idnotification);
    }

    /**
     * {@inheritDoc}
     */
    public function getIdnotificationemitter()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIdnotificationemitter', []);

        return parent::getIdnotificationemitter();
    }

    /**
     * {@inheritDoc}
     */
    public function addIdnotificationreceiver(\Hub\HubBundle\Entity\Notification $idnotification)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addIdnotificationreceiver', [$idnotification]);

        return parent::addIdnotificationreceiver($idnotification);
    }

    /**
     * {@inheritDoc}
     */
    public function removeIdnotificationreceiver(\Hub\HubBundle\Entity\Notification $idnotification)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeIdnotificationreceiver', [$idnotification]);

        return parent::removeIdnotificationreceiver($idnotification);
    }

    /**
     * {@inheritDoc}
     */
    public function getIdnotificationreceiver()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIdnotificationreceiver', []);

        return parent::getIdnotificationreceiver();
    }

    /**
     * {@inheritDoc}
     */
    public function getSalt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSalt', []);

        return parent::getSalt();
    }

    /**
     * {@inheritDoc}
     */
    public function getPassword()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPassword', []);

        return parent::getPassword();
    }

    /**
     * {@inheritDoc}
     */
    public function getUsername()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUsername', []);

        return parent::getUsername();
    }

    /**
     * {@inheritDoc}
     */
    public function getRoles()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRoles', []);

        return parent::getRoles();
    }

    /**
     * {@inheritDoc}
     */
    public function eraseCredentials()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'eraseCredentials', []);

        return parent::eraseCredentials();
    }

    /**
     * {@inheritDoc}
     */
    public function equals(\Symfony\Component\Security\Core\User\UserInterface $user)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'equals', [$user]);

        return parent::equals($user);
    }

}
